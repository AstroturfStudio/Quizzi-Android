name: Beta Release Pipeline

on:
  push:
    tags:
      - 'breaking'
      - 'feature'
      - 'fix'
  workflow_dispatch:

jobs:
  build-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.VERSION_UPDATE_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Update Version Properties
        id: version
        run: |
          # Python script to update version properties
          echo "$(python3 -c '
          import re
          import os
          
          def get_latest_tag():
              import subprocess
              try:
                  result = subprocess.run(["git", "describe", "--tags", "--abbrev=0"], 
                                        capture_output=True, text=True)
                  return result.stdout.strip()
              except:
                  return None
          
          def update_version_properties():
              props_file = "version.properties"
              with open(props_file, "r") as f:
                  content = f.readlines()
              
              props = {}
              for line in content:
                  if "=" in line:
                      key, value = line.strip().split("=")
                      props[key] = value
              
              latest_tag = get_latest_tag()
              
              if latest_tag == "breaking":
                  props["major"] = str(int(props["major"]) + 1)
                  props["minor"] = "0"
                  props["patch"] = "0"
              elif latest_tag == "feature":
                  props["minor"] = str(int(props["minor"]) + 1)
                  props["patch"] = "0"
              elif latest_tag == "fix":
                  props["patch"] = str(int(props["patch"]) + 1)
              
              # Update stage to alpha
              props["stage"] = "alpha"
              
              # Write back to file
              with open(props_file, "w") as f:
                  for key, value in props.items():
                      f.write(f"{key}={value}\n")
          
          update_version_properties()
          ')"

      - name: Calculate New Version Code
        id: version_code
        run: |
          # Python script modified for .kts syntax
          echo "$(python3 -c '
          import re
          
          def get_next_version():
              gradle_file = "app/build.gradle.kts"
              with open(gradle_file, "r") as f:
                  content = f.read()
          
              version_code_match = re.search(r"versionCode\s*=\s*(\d+)", content)
              if not version_code_match:
                  raise Exception("Version code not found")
          
              current_version = int(version_code_match.group(1))
              new_version = current_version + 1
          
              new_content = re.sub(
                  r"versionCode\s*=\s*\d+",
                  f"versionCode = {new_version}",
                  content
              )
          
              with open(gradle_file, "w") as f:
                  f.write(new_content)
          
              print(f"::set-output name=new_version_code::{new_version}")
              return new_version
          
          get_next_version()
          ')"

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_FILE_BASE64 }}" > keystore.b64
          base64 -d keystore.b64 > upload-key.jks

      - name: Build & Test
        run: |
          ./gradlew test
          ./gradlew bundleProdRelease
        env:
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-bundle
          path: app/build/outputs/bundle/prodRelease/app-prod-release.aab

      - name: Upload Mapping File
        uses: actions/upload-artifact@v4
        with:
          name: proguard-mapping
          path: app/build/outputs/mapping/prodRelease/mapping.txt

      - name: Prepare Store Credentials
        run: |
          echo '${{ secrets.PLAY_STORE_CREDENTIALS }}' > play-store-credentials.json

      - name: Deploy to Play Store Alpha
        id: play_store_deploy
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: play-store-credentials.json
          packageName: "studio.astroturf.quizzi"
          releaseFiles: app/build/outputs/bundle/prodRelease/app-prod-release.aab
          track: alpha
          mappingFile: app/build/outputs/mapping/prodRelease/mapping.txt
          status: completed

      # Only commit the version change if deployment succeeded
      - name: Commit Version Update
        if: success()
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add app/build.gradle.kts
          git commit -m "chore: Bump version code to ${{ steps.version_code.outputs.new_version_code }} after successful deploy [skip ci]"
          git push